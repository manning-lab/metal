qq(all.results$meta_pval, xlim = c(0,7), ylim = c(0,7))
legend('topleft',c(paste0("GC = ", lam(all.results$meta_pval))))
manhattan(all.results,p="meta_pval",chr="chromosome_name",bp="transcript_start",snp="external_gene_name",genomewideline = -log10(0.05/length(all.results$meta_pval[!is.na(all.results$meta_pval)])), ylim = c(0,7), suggestiveline = F)
dev.off()
png(filename = "/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/ptv/mask1_v2/meta.plots.png",width = 24, height = 12, units = "in", res=200)
par(mfrow=c(1,2))
qq(all.results$meta_pval, xlim = c(0,7), ylim = c(0,7))
legend('topleft',c(paste0("GC = ", lam(all.results$meta_pval))))
manhattan(all.results,p="meta_pval",chr="chromosome_name",bp="transcript_start",snp="external_gene_name",genomewideline = -log10(0.05/length(all.results$meta_pval[!is.na(all.results$meta_pval)])), ylim = c(0,7), suggestiveline = F)
dev.off()
library(data.table)
AF.results <- fread("/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/ptv/mask4_v1/freeze5b_minDP10_ptv_mask1_AF.groupAssoc.csv",data.table=F)
AS.results <- fread("/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/ptv/mask4_v1/freeze5b_minDP10_ptv_mask1_AS.groupAssoc.csv",data.table=F)
HS.results <- fread("/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/ptv/mask4_v1/freeze5b_minDP10_ptv_mask1_HS.groupAssoc.csv",data.table=F)
EU.results <- fread("/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/ptv/mask4_v1/freeze5b_minDP10_ptv_mask1_EU.groupAssoc.csv",data.table=F)
library(qqman)
names(AS.results)[1] <- "name"
names(AF.results)[1] <- "name"
names(EU.results)[1] <- "name"
names(HS.results)[1] <- "name"
all.results <- merge(AS.results,AF.results,by="name",suffixes = c(".AS",".AF"),all=T)
all.results2 <- merge(HS.results,EU.results,by="name",suffixes = c(".HS",".EU"),all=T)
all.results <- merge(all.results,all.results2,by="name",all=T)
rm(all.results2)
head(all.results)
library(metap)
all.results$meta_pval <- apply(all.results[,c("pval_0.AS","pval_0.AF","pval_0.EU","pval_0.HS")],1,function(x){keep <- !is.na(x) ;if(sum(keep)==0) {return(NA)} else if (sum(keep)==1){return(x[keep])}; logitp(x[keep])$p})
library(biomaRt)
# define biomart object
mart <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
# query biomart
results <- getBM(attributes = c("ensembl_gene_id", "ensembl_transcript_id", "external_gene_name","transcript_start","chromosome_name"),
filters = "ensembl_gene_id", values = unique(all.results$name),
mart = mart)
head(results)
all.results <- merge(all.results,results,by.x="name",by.y="ensembl_gene_id")
all.results <- all.results[!duplicated(all.results$name),]
head(all.results)
lam = function(x,p=.5){
x = x[!is.na(x)]
chisq <- qchisq(1-x,1)
round((quantile(chisq,p)/qchisq(p,1)),2)
}
library(qqman)
png(filename = "/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/ptv/mask4_v1/all.plots.png",width = 24, height = 12, units = "in", res=200)
par(mfrow=c(2,4))
qq(all.results$pval_0.AS,main="Asian Ancestry", xlim = c(0,6), ylim = c(0,6))
legend('topleft',c(paste0("GC = ", lam(all.results$pval_0.AS))))
qq(all.results$pval_0.AF,main="African American Ancestry", xlim = c(0,6), ylim = c(0,6))
legend('topleft',c(paste0("GC = ", lam(all.results$pval_0.AF))))
qq(all.results$pval_0.EU,main="European Ancestry", xlim = c(0,6), ylim = c(0,6))
legend('topleft',c(paste0("GC = ", lam(all.results$pval_0.EU))))
qq(all.results$pval_0.HS,main="Histpanic Ancestry", xlim = c(0,6), ylim = c(0,6))
legend('topleft',c(paste0("GC = ", lam(all.results$pval_0.HS))))
manhattan(all.results,p="pval_0.AS",chr="chromosome_name",bp="transcript_start",snp="external_gene_name",genomewideline = -log10(0.05/length(all.results$meta_pval[!is.na(all.results$meta_pval)])), ylim = c(0,6), suggestiveline = F)
manhattan(all.results,p="pval_0.AF",chr="chromosome_name",bp="transcript_start",snp="external_gene_name",genomewideline = -log10(0.05/length(all.results$meta_pval[!is.na(all.results$meta_pval)])), ylim = c(0,6), suggestiveline = F)
manhattan(all.results,p="pval_0.EU",chr="chromosome_name",bp="transcript_start",snp="external_gene_name",genomewideline = -log10(0.05/length(all.results$meta_pval[!is.na(all.results$meta_pval)])), ylim = c(0,6), suggestiveline = F)
manhattan(all.results,p="pval_0.HS",chr="chromosome_name",bp="transcript_start",snp="external_gene_name",genomewideline = -log10(0.05/length(all.results$meta_pval[!is.na(all.results$meta_pval)])), ylim = c(0,6), suggestiveline = F)
dev.off()
png(filename = "/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/ptv/mask4_v1/meta.plots.png",width = 24, height = 12, units = "in", res=200)
par(mfrow=c(1,2))
qq(all.results$meta_pval, xlim = c(0,7), ylim = c(0,7))
legend('topleft',c(paste0("GC = ", lam(all.results$meta_pval))))
manhattan(all.results,p="meta_pval",chr="chromosome_name",bp="transcript_start",snp="external_gene_name",genomewideline = -log10(0.05/length(all.results$meta_pval[!is.na(all.results$meta_pval)])), ylim = c(0,7), suggestiveline = F)
dev.off()
AF.results <- fread("/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/ptv/mask4_v1/freeze5b_minDP10_ptv_mask1_AF.groupAssoc.csv",data.table=F)
AS.results <- fread("/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/ptv/mask4_v1/freeze5b_minDP10_ptv_mask1_AS.groupAssoc.csv",data.table=F)
HS.results <- fread("/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/ptv/mask4_v1/freeze5b_minDP10_ptv_mask1_HS.groupAssoc.csv",data.table=F)
EU.results <- fread("/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/ptv/mask4_v1/freeze5b_minDP10_ptv_mask1_EU.groupAssoc.csv",data.table=F)
library(data.table)
AF.results <- fread("/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/ptv/mask4_v1/freeze5b_minDP10_ptv_mask4_AF.groupAssoc.csv",data.table=F)
AS.results <- fread("/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/ptv/mask4_v1/freeze5b_minDP10_ptv_mask4_AS.groupAssoc.csv",data.table=F)
HS.results <- fread("/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/ptv/mask4_v1/freeze5b_minDP10_ptv_mask4_HS.groupAssoc.csv",data.table=F)
EU.results <- fread("/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/ptv/mask4_v1/freeze5b_minDP10_ptv_mask4_EU.groupAssoc.csv",data.table=F)
library(qqman)
names(AS.results)[1] <- "name"
names(AF.results)[1] <- "name"
names(EU.results)[1] <- "name"
names(HS.results)[1] <- "name"
all.results <- merge(AS.results,AF.results,by="name",suffixes = c(".AS",".AF"),all=T)
all.results2 <- merge(HS.results,EU.results,by="name",suffixes = c(".HS",".EU"),all=T)
all.results <- merge(all.results,all.results2,by="name",all=T)
rm(all.results2)
head(all.results)
library(metap)
all.results$meta_pval <- apply(all.results[,c("pval_0.AS","pval_0.AF","pval_0.EU","pval_0.HS")],1,function(x){keep <- !is.na(x) ;if(sum(keep)==0) {return(NA)} else if (sum(keep)==1){return(x[keep])}; logitp(x[keep])$p})
library(biomaRt)
# define biomart object
mart <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
# query biomart
results <- getBM(attributes = c("ensembl_gene_id", "ensembl_transcript_id", "external_gene_name","transcript_start","chromosome_name"),
filters = "ensembl_gene_id", values = unique(all.results$name),
mart = mart)
head(results)
all.results <- merge(all.results,results,by.x="name",by.y="ensembl_gene_id")
all.results <- all.results[!duplicated(all.results$name),]
head(all.results)
lam = function(x,p=.5){
x = x[!is.na(x)]
chisq <- qchisq(1-x,1)
round((quantile(chisq,p)/qchisq(p,1)),2)
}
library(qqman)
png(filename = "/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/ptv/mask4_v1/all.plots.png",width = 24, height = 12, units = "in", res=200)
par(mfrow=c(2,4))
qq(all.results$pval_0.AS,main="Asian Ancestry", xlim = c(0,6), ylim = c(0,6))
legend('topleft',c(paste0("GC = ", lam(all.results$pval_0.AS))))
qq(all.results$pval_0.AF,main="African American Ancestry", xlim = c(0,6), ylim = c(0,6))
legend('topleft',c(paste0("GC = ", lam(all.results$pval_0.AF))))
qq(all.results$pval_0.EU,main="European Ancestry", xlim = c(0,6), ylim = c(0,6))
legend('topleft',c(paste0("GC = ", lam(all.results$pval_0.EU))))
qq(all.results$pval_0.HS,main="Histpanic Ancestry", xlim = c(0,6), ylim = c(0,6))
legend('topleft',c(paste0("GC = ", lam(all.results$pval_0.HS))))
manhattan(all.results,p="pval_0.AS",chr="chromosome_name",bp="transcript_start",snp="external_gene_name",genomewideline = -log10(0.05/length(all.results$meta_pval[!is.na(all.results$meta_pval)])), ylim = c(0,6), suggestiveline = F)
manhattan(all.results,p="pval_0.AF",chr="chromosome_name",bp="transcript_start",snp="external_gene_name",genomewideline = -log10(0.05/length(all.results$meta_pval[!is.na(all.results$meta_pval)])), ylim = c(0,6), suggestiveline = F)
manhattan(all.results,p="pval_0.EU",chr="chromosome_name",bp="transcript_start",snp="external_gene_name",genomewideline = -log10(0.05/length(all.results$meta_pval[!is.na(all.results$meta_pval)])), ylim = c(0,6), suggestiveline = F)
manhattan(all.results,p="pval_0.HS",chr="chromosome_name",bp="transcript_start",snp="external_gene_name",genomewideline = -log10(0.05/length(all.results$meta_pval[!is.na(all.results$meta_pval)])), ylim = c(0,6), suggestiveline = F)
dev.off()
png(filename = "/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/ptv/mask4_v1/meta.plots.png",width = 24, height = 12, units = "in", res=200)
par(mfrow=c(1,2))
qq(all.results$meta_pval, xlim = c(0,7), ylim = c(0,7))
legend('topleft',c(paste0("GC = ", lam(all.results$meta_pval))))
manhattan(all.results,p="meta_pval",chr="chromosome_name",bp="transcript_start",snp="external_gene_name",genomewideline = -log10(0.05/length(all.results$meta_pval[!is.na(all.results$meta_pval)])), ylim = c(0,7), suggestiveline = F)
dev.off()
png(filename = "/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/ptv/mask4_v1/meta.plots.png",width = 24, height = 12, units = "in", res=200)
par(mfrow=c(1,2))
qq(all.results$meta_pval, xlim = c(0,6), ylim = c(0,6))
legend('topleft',c(paste0("GC = ", lam(all.results$meta_pval))))
manhattan(all.results,p="meta_pval",chr="chromosome_name",bp="transcript_start",snp="external_gene_name",genomewideline = -log10(0.05/length(all.results$meta_pval[!is.na(all.results$meta_pval)])), ylim = c(0,6), suggestiveline = F)
dev.off()
library(data.table)
ped <- fread("/Users/tmajaria/Documents/projects/topmed/data/freeze5b_phenotypes/T2D.tmajaria.04.02.2018.no.duplicates.csv", data.table = F, stringsAsFactors = F)
length(unique(ped$study))
min(ped[ped$t2d != 0,]$last_exam_fg, na.rm = T)
min(ped[ped$t2d == 2,]$last_exam_fg, na.rm = T)
max(ped[ped$t2d == 2,]$last_exam_fg, na.rm = T)
min(ped[ped$t2d == 2,]$last_exam_fg, na.rm = T)
names(ped)
order(ped[ped$t2d == 2,]$last_exam_fg)
ped[ped$t2d == 2,]$last_exam_fg[order(ped[ped$t2d == 2,]$last_exam_fg)]
min(ped[ped$t2d_ctrl == 1,]$last_exam_fg, na.rm = T)
ped[ped$t2d_ctrl == 1,]$last_exam_fg[order(ped[ped$t2d_ctrl == 1,]$last_exam_fg)]
tail(ped[ped$t2d_ctrl == 1,]$last_exam_fg[order(ped[ped$t2d_ctrl == 1,]$last_exam_fg)])
ped[ped$t2d_ctrl == 1,]$last_exam_fg[order(ped[ped$t2d_ctrl == 1,]$last_exam_fg)]
library(data.table)
res <- fread('/Users/tmajaria/Documents/projects/topmed/code/varshney/freeze5b/mask6/agg6.genomewide.results.csv', data.table = F)
head(res)
head(res[order(res$meta_pval),])]
head(res[order(res$meta_pval),])
g <- fread("/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/ptv/ptv_masks/final/freeze5b_dp10_ptv_mask1.tsv", data.table = F, stringsAsFactors = F)
head(g)
library(data.table)
AF.results <- fread("/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/ptv/mask1_v2/freeze5b_minDP10_ptv_mask1_AF.groupAssoc.csv",data.table=F)
AS.results <- fread("/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/ptv/mask1_v2/freeze5b_minDP10_ptv_mask1_AS.groupAssoc.csv",data.table=F)
HS.results <- fread("/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/ptv/mask1_v2/freeze5b_minDP10_ptv_mask1_HS.groupAssoc.csv",data.table=F)
EU.results <- fread("/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/ptv/mask1_v2/freeze5b_minDP10_ptv_mask1_EU.groupAssoc.csv",data.table=F)
library(qqman)
names(AS.results)[1] <- "name"
names(AF.results)[1] <- "name"
names(EU.results)[1] <- "name"
names(HS.results)[1] <- "name"
all.results <- merge(AS.results,AF.results,by="name",suffixes = c(".AS",".AF"),all=T)
all.results2 <- merge(HS.results,EU.results,by="name",suffixes = c(".HS",".EU"),all=T)
all.results <- merge(all.results,all.results2,by="name",all=T)
rm(all.results2)
head(all.results)
length(unique(all.results$name))
head(all.results[order(all.results$pval_0.AS),])
-log10(0.05/length(all.results$meta_pval[!is.na(all.results$meta_pval)])
)
library(metap)
all.results$meta_pval <- apply(all.results[,c("pval_0.AS","pval_0.AF","pval_0.EU","pval_0.HS")],1,function(x){keep <- !is.na(x) ;if(sum(keep)==0) {return(NA)} else if (sum(keep)==1){return(x[keep])}; logitp(x[keep])$p})
-log10(0.05/length(all.results$meta_pval[!is.na(all.results$meta_pval)]))
0.05/length(all.results$meta_pval[!is.na(all.results$meta_pval)])
length(all.results$meta_pval[!is.na(all.results$meta_pval)])
0.05/18420
head(all.results[order(all.results$meta_pval),])
library(data.table)
AF.results <- fread("/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/ptv/mask4_v1/freeze5b_minDP10_ptv_mask4_AF.groupAssoc.csv",data.table=F)
AS.results <- fread("/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/ptv/mask4_v1/freeze5b_minDP10_ptv_mask4_AS.groupAssoc.csv",data.table=F)
HS.results <- fread("/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/ptv/mask4_v1/freeze5b_minDP10_ptv_mask4_HS.groupAssoc.csv",data.table=F)
EU.results <- fread("/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/ptv/mask4_v1/freeze5b_minDP10_ptv_mask4_EU.groupAssoc.csv",data.table=F)
library(qqman)
names(AS.results)[1] <- "name"
names(AF.results)[1] <- "name"
names(EU.results)[1] <- "name"
names(HS.results)[1] <- "name"
all.results <- merge(AS.results,AF.results,by="name",suffixes = c(".AS",".AF"),all=T)
all.results2 <- merge(HS.results,EU.results,by="name",suffixes = c(".HS",".EU"),all=T)
all.results <- merge(all.results,all.results2,by="name",all=T)
rm(all.results2)
head(all.results)
library(metap)
all.results$meta_pval <- apply(all.results[,c("pval_0.AS","pval_0.AF","pval_0.EU","pval_0.HS")],1,function(x){keep <- !is.na(x) ;if(sum(keep)==0) {return(NA)} else if (sum(keep)==1){return(x[keep])}; logitp(x[keep])$p})
head(all.results[order(all.results$pval_0.AS),])
2.654898e-06
2.654898e-06 < 0.05/nrow(all.results)
2.654898e-06 < 0.05/nrow(all.results[!is.na(all.results$meta_pval),])
0.05/nrow(all.results[!is.na(all.results$meta_pval),])
nrow(all.results[!is.na(all.results$meta_pval),])
length(unique(all.results$name))
2.654898e-06 - 0.05/nrow(all.results[!is.na(all.results$meta_pval),])
library(data.table)
AF.results <- fread("/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/noncoding/v9_ferrer/freeze5b_minDP10_mask9_AF.groupAssoc.csv",data.table=F)
AS.results <- fread("/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/noncoding/v9_ferrer/freeze5b_minDP10_mask9_AS.groupAssoc.csv",data.table=F)
HS.results <- fread("/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/noncoding/v9_ferrer/freeze5b_minDP10_mask9_HS.groupAssoc.csv",data.table=F)
EU.results <- fread("/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/noncoding/v9_ferrer/freeze5b_minDP10_mask9_EU.groupAssoc.csv",data.table=F)
library(qqman)
names(AS.results)[1] <- "name"
names(AF.results)[1] <- "name"
names(EU.results)[1] <- "name"
names(HS.results)[1] <- "name"
all.results <- merge(AS.results,AF.results,by="name",suffixes = c(".AS",".AF"),all=T)
all.results2 <- merge(HS.results,EU.results,by="name",suffixes = c(".HS",".EU"),all=T)
all.results <- merge(all.results,all.results2,by="name",all=T)
rm(all.results2)
head(all.results)
library(metap)
all.results$meta_pval <- apply(all.results[,c("pval_0.AS","pval_0.AF","pval_0.EU","pval_0.HS")],1,function(x){keep <- !is.na(x) ;if(sum(keep)==0) {return(NA)} else if (sum(keep)==1){return(x[keep])}; logitp(x[keep])$p})
all.results <- all.results[order(all.results$meta_pval),]
head(all.results)
lam = function(x,p=.5){
x = x[!is.na(x)]
chisq <- qchisq(1-x,1)
round((quantile(chisq,p)/qchisq(p,1)),2)
}
qq(all.results$pval_0.AS,main="Asian Ancestry", xlim = c(0,7), ylim = c(0,7))
head(all.results[order(all.results$pval_0.AS),])
qq(all.results$pval_0.AS,main="Asian Ancestry", xlim = c(0,8), ylim = c(0,8))
legend('topleft',c(paste0("GC = ", lam(all.results$pval_0.AS))))
qq(all.results$pval_0.AF,main="African American Ancestry", xlim = c(0,7), ylim = c(0,7))
qq(all.results$pval_0.EU,main="European Ancestry", xlim = c(0,7), ylim = c(0,7))
qq(all.results$pval_0.HS,main="Histpanic Ancestry", xlim = c(0,7), ylim = c(0,7))
manhattan(all.results,p="pval_0.AS",chr="chromosome_name",bp="transcript_start",snp="external_gene_name",genomewideline = -log10(0.05/length(all.results$meta_pval[!is.na(all.results$meta_pval)])), ylim = c(0,7), suggestiveline = F)
all.results[is.na(all.results$pos.EU),]
manhattan(all.results,p="pval_0.AS",chr="chromosome_name",bp="pos.EU",genomewideline = -log10(0.05/length(all.results$meta_pval[!is.na(all.results$meta_pval)])), ylim = c(0,7), suggestiveline = F)
manhattan(all.results,p="pval_0.AS",chr="chr.EU",bp="pos.EU",genomewideline = -log10(0.05/length(all.results$meta_pval[!is.na(all.results$meta_pval)])), ylim = c(0,7), suggestiveline = F)
manhattan(all.results,p="pval_0.AF",chr="chr.EU",bp="pos.EU",genomewideline = -log10(0.05/length(all.results$meta_pval[!is.na(all.results$meta_pval)])), ylim = c(0,7), suggestiveline = F)
manhattan(all.results,p="pval_0.EU",chr="chr.EU",bp="pos.EU",genomewideline = -log10(0.05/length(all.results$meta_pval[!is.na(all.results$meta_pval)])), ylim = c(0,7), suggestiveline = F)
manhattan(all.results,p="pval_0.HS",chr="chr.EU",bp="pos.EU",genomewideline = -log10(0.05/length(all.results$meta_pval[!is.na(all.results$meta_pval)])), ylim = c(0,7), suggestiveline = F)
manhattan(all.results,p="pval_0.AS",chr="chr.EU",bp="pos.EU",genomewideline = -log10(0.05/length(all.results$meta_pval[!is.na(all.results$meta_pval)])), ylim = c(0,7), suggestiveline = F)
manhattan(all.results,p="pval_0.AF",chr="chr.EU",bp="pos.EU",genomewideline = -log10(0.05/length(all.results$meta_pval[!is.na(all.results$meta_pval)])), ylim = c(0,7), suggestiveline = F)
head(all.results)
library(qqman)
png(filename = "/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/noncoding/v9_ferrer/all.plots.png",width = 24, height = 12, units = "in", res=200)
par(mfrow=c(2,4))
qq(all.results$pval_0.AS,main="Asian Ancestry", xlim = c(0,7), ylim = c(0,7))
legend('topleft',c(paste0("GC = ", lam(all.results$pval_0.AS))))
qq(all.results$pval_0.AF,main="African American Ancestry", xlim = c(0,7), ylim = c(0,7))
legend('topleft',c(paste0("GC = ", lam(all.results$pval_0.AF))))
qq(all.results$pval_0.EU,main="European Ancestry", xlim = c(0,7), ylim = c(0,7))
legend('topleft',c(paste0("GC = ", lam(all.results$pval_0.EU))))
qq(all.results$pval_0.HS,main="Histpanic Ancestry", xlim = c(0,7), ylim = c(0,7))
legend('topleft',c(paste0("GC = ", lam(all.results$pval_0.HS))))
manhattan(all.results,p="pval_0.AS",chr="chr.EU",bp="pos.EU",genomewideline = -log10(0.05/length(all.results$meta_pval[!is.na(all.results$meta_pval)])), ylim = c(0,7), suggestiveline = F)
manhattan(all.results,p="pval_0.AF",chr="chr.EU",bp="pos.EU",genomewideline = -log10(0.05/length(all.results$meta_pval[!is.na(all.results$meta_pval)])), ylim = c(0,7), suggestiveline = F)
manhattan(all.results,p="pval_0.EU",chr="chr.EU",bp="pos.EU",genomewideline = -log10(0.05/length(all.results$meta_pval[!is.na(all.results$meta_pval)])), ylim = c(0,7), suggestiveline = F)
manhattan(all.results,p="pval_0.HS",chr="chr.EU",bp="pos.EU",genomewideline = -log10(0.05/length(all.results$meta_pval[!is.na(all.results$meta_pval)])), ylim = c(0,7), suggestiveline = F)
dev.off()
png(filename = "/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/noncoding/v9_ferrer/meta.plots.png",width = 24, height = 12, units = "in", res=200)
par(mfrow=c(1,2))
qq(all.results$meta_pval, xlim = c(0,7), ylim = c(0,7))
legend('topleft',c(paste0("GC = ", lam(all.results$meta_pval))))
manhattan(all.results,p="meta_pval",chr="chr.EU",bp="pos.EU",genomewideline = -log10(0.05/length(all.results$meta_pval[!is.na(all.results$meta_pval)])), ylim = c(0,7), suggestiveline = F)
dev.off()
png(filename = "/Users/tmajaria/Documents/projects/topmed/results/rarevar/freeze5b/noncoding/v9_ferrer/meta.plots.png",width = 24, height = 12, units = "in", res=200)
par(mfrow=c(1,2))
qq(all.results$meta_pval, xlim = c(0,6), ylim = c(0,6))
legend('topleft',c(paste0("GC = ", lam(all.results$meta_pval))))
manhattan(all.results,p="meta_pval",chr="chr.EU",bp="pos.EU",genomewideline = -log10(0.05/length(all.results$meta_pval[!is.na(all.results$meta_pval)])), ylim = c(0,6), suggestiveline = F)
dev.off()
all.results$max_p <- apply(all.results[,c("pval_0.AS","pval_0.AF","pval_0.EU","pval_0.HS")], 1, max)
all.results <- all.results[order(all.results$max_p),]
head(all.results)
all.results <- all.results[order(all.results$max_p, decreasing = T),]
all.results$max_p <- apply(all.results[,c("pval_0.AS","pval_0.AF","pval_0.EU","pval_0.HS")], 1, min)
all.results$min_p <- apply(all.results[,c("pval_0.AS","pval_0.AF","pval_0.EU","pval_0.HS")], 1, min)
all.results <- all.results[order(all.results$min_p),]
head(all.results)
all.results$ehub <- unlist(lapply(all.results$name, function(x) unlist(strsplit(x,";"))[0]))
all.results$ehub <- unlist(lapply(all.results$name, function(x) unlist(strsplit(x,";"))[1]))
head(all.results)
hub.file <- "/Users/tmajaria/Documents/projects/topmed/data/ferrer/Islet_annotations_FerrerLab/Islet_enhancer_hubs.grch38.csv"
islet.hub <- fread(hub.file, data.table = F, stringsAsFactors = F)
islet.hub <- islet.hub[islet.hub$hub.id %in% all.results$ehub[1:4],]
islet.hub
unique(islet.hub$hub.genes)
islet.hub <- fread(hub.file, data.table = F, stringsAsFactors = F)
islet.hub <- islet.hub[islet.hub$hub.id %in% all.results$ehub[1],]
islet.hub
unique(islet.hub$hub.genes)
islet.hub <- fread(hub.file, data.table = F, stringsAsFactors = F)
islet.hub <- islet.hub[islet.hub$hub.id %in% all.results$ehub[2],]
unique(islet.hub$hub.genes)
setwd("~/Documents/projects/public_workflows/metal/test_inputs")
# Load packages
lapply(c("qqman","data.table"), library, character.only = TRUE)
######### test inputs #################
marker.column <- "snpID"
freq.column <- "MAF"
pval.column <- "Score.pval"
sample.column <- "n"
# cols.tokeep <- unlist(strsplit(input_args[5],","))
# assoc.names <- unlist(strsplit(input_args[6],","))
out.pref <- "demo"
metal.file <- "demo1.tsv"
assoc.files <- c("demo.1.assoc.csv","demo.2.assoc.csv")
# define names for each input analysis
assoc.names <- sapply(assoc.files, basename)
assoc.names
assoc.names[1]
assoc.names[[1]]
# define names for each input analysis
assoc.names <- unlist(lapply(assoc.files, basename)))
# define names for each input analysis
assoc.names <- unlist(lapply(assoc.files, basename))
assoc.names
# define names for each input analysis
assoc.names <- unlist(sapply(assoc.files, basename))
assoc.names
# define names for each input analysis
assoc.names <- unlist(lapply(assoc.files, basename))
assoc.names
# Load packages
lapply(c("qqman","data.table","tools"), library, character.only = TRUE)
# define names for each input analysis
assoc.names <- unlist(lapply(assoc.files, function(x) file_path_sans_ext(basename(x)) ))
assoc.names
# load metal results
metal.data <- fread(metal.file,data.table=F)
head(metal.data)
assoc.data <- fread(assoc.files[1],data.table=F)
head(assoc.data)
names(metal.data)
names(assoc.data)
f <- 1
t <- merge(metal.data, assoc.data, by.x = "MarkerName", by.y = marker.column, suffixes = assoc.names[f])
head(t)
names(t)
t <- merge(metal.data, assoc.data, by.x = "MarkerName", by.y = marker.column, suffixes = rep(assoc.names[f], ncol(asso.data)-1))
names(t)
?merge
names(assoc.data)[names(assoc.data) != marker.column] = paste(names(assoc.data)[names(assoc.data) != marker.column], assoc.names[f], sep = "")
names(assoc.data)
assoc.data <- fread(assoc.files[f],data.table=F)
names(assoc.data)[names(assoc.data) != marker.column] = paste(names(assoc.data)[names(assoc.data) != marker.column], assoc.names[f], sep = ".")
names(assoc.data)
# load metal results
metal.data <- fread(metal.file,data.table=F)
# load individual results and merge
for (f in seq(1,length(assoc.files))){
assoc.data <- fread(assoc.files[f],data.table=F)
names(assoc.data)[names(assoc.data) != marker.column] = paste(names(assoc.data)[names(assoc.data) != marker.column], assoc.names[f], sep = ".")
metal.data <- merge(metal.data, assoc.data, by.x = "MarkerName", by.y = marker.column)
}
names(metal.data)
?startsWith
# load metal results
metal.data <- fread(metal.file,data.table=F)
# names to keep later on
names.to.keep <- names(metal)
# names to keep later on
names.to.keep <- names(metal.data)
# load individual results and merge
for (f in seq(1,length(assoc.files))){
assoc.data <- fread(assoc.files[f],data.table=F)
names(assoc.data)[names(assoc.data) != marker.column] = paste(names(assoc.data)[names(assoc.data) != marker.column], assoc.names[f], sep = ".")
metal.data <- merge(metal.data, assoc.data, by.x = "MarkerName", by.y = marker.column)
}
# remove unneeded columns
names.to.keep <- c(names.to.keep, names(metal)[startswith(names(metal),"n.")], names(metal)[startswith(names(metal),"MAF")], names(metal)[startswith(names(metal),pval.column)])
# remove unneeded columns
names.to.keep <- c(names.to.keep, names(metal.data)[startswith(names(metal.data),"n.")], names(metal.data)[startswith(names(metal.data),"MAF")], names(metal.data)[startswith(names(metal.data),pval.column)])
# remove unneeded columns
names.to.keep <- c(names.to.keep, names(metal.data)[startsWith(names(metal.data),"n.")], names(metal.data)[startsWith(names(metal.data),"MAF")], names(metal.data)[startsWith(names(metal.data),pval.column)])
names.to.keep
names(metal.data)
# order based on meta pvalue
metal.data <- metal.data[order(metal.data[,"P-value"]),]
names(metal.data)
names(metal.data) %in% names.to.keep
metal.data <- metal.data[,names(metal.data)[names(metal.data) %in% names.to.keep]]
names(metal.data)
head(metal.data)
# order based on meta pvalue
metal.data <- metal.data[order(metal.data[,"P-value"]),]
names(metal.data)
names(metal.data)[startsWith(names(metal.data),"n.")]
n <- assoc.names[1]
n
paste(sample.column,".",n,sep="")
paste(freq.column,".",n,sep="")
# calculate full sample mac for each variant
all_mac <- c()
for (n in assoc.names){
all_mac <- cbind(all_mac, 2 * metal.data[,paste(sample.column,".",n,sep="")] * metal.data[,paste(freq.column,".",n,sep="")] )
}
head(all_mac)
metal.data$total_maf <- rowSums(all_mac)/(2*metal.data$Weight)
head(metal.data)
names(metal.data)
# load metal results
metal.data <- fread(metal.file,data.table=F)
# names to keep later on
names.to.keep <- names(metal.data)
# load individual results and merge
for (f in seq(1,length(assoc.files))){
assoc.data <- fread(assoc.files[f],data.table=F)
names(assoc.data)[names(assoc.data) != marker.column] = paste(names(assoc.data)[names(assoc.data) != marker.column], assoc.names[f], sep = ".")
metal.data <- merge(metal.data, assoc.data, by.x = "MarkerName", by.y = marker.column)
}
# get the position and chromosome columns for manhatten
pos <- metal.data[,names(metal.data)[startsWith(names(metal.data), "pos")]]
chr <- metal.data[,names(metal.data)[startsWith(names(metal.data), "chr")]]
head(pos)
head(chr)
head(assoc.data)
pos <- unlist(apply(pos, 1, function(x) unique(x[!is.na(x)])[1]))
head(pos)
# get the position and chromosome columns for manhatten
pos <- unlist(apply(metal.data[,names(metal.data)[startsWith(names(metal.data), "pos")]], 1, function(x) unique(x[!is.na(x)])[1]))
chr <- unlist(apply(metal.data[,names(metal.data)[startsWith(names(metal.data), "chr")]], 1, function(x) unique(x[!is.na(x)])[1]))
# load metal results
metal.data <- fread(metal.file,data.table=F)
# names to keep later on
names.to.keep <- names(metal.data)
# load individual results and merge
for (f in seq(1,length(assoc.files))){
assoc.data <- fread(assoc.files[f],data.table=F)
names(assoc.data)[names(assoc.data) != marker.column] = paste(names(assoc.data)[names(assoc.data) != marker.column], assoc.names[f], sep = ".")
metal.data <- merge(metal.data, assoc.data, by.x = "MarkerName", by.y = marker.column)
}
# get the position and chromosome columns for manhatten
metal.data$pos <- unlist(apply(metal.data[,names(metal.data)[startsWith(names(metal.data), "pos")]], 1, function(x) unique(x[!is.na(x)])[1]))
metal.data$chr <- unlist(apply(metal.data[,names(metal.data)[startsWith(names(metal.data), "chr")]], 1, function(x) unique(x[!is.na(x)])[1]))
# remove unneeded columns
names.to.keep <- c(names.to.keep, "pos", "chr", names(metal.data)[startsWith(names(metal.data),"n.")], names(metal.data)[startsWith(names(metal.data),"MAF")], names(metal.data)[startsWith(names(metal.data),pval.column)])
metal.data <- metal.data[,names(metal.data)[names(metal.data) %in% names.to.keep]]
names(metal.darta)
names(metal.data)
# order based on meta pvalue
metal.data <- metal.data[order(metal.data[,"P-value"]),]
# calculate full sample mac for each variant
all_mac <- c()
for (n in assoc.names){
all_mac <- cbind(all_mac, 2 * metal.data[,paste(sample.column,".",n,sep="")] * metal.data[,paste(freq.column,".",n,sep="")] )
}
metal.data$total_maf <- rowSums(all_mac)/(2*metal.data$Weight)
# write results out to file
fwrite(metal.data, file = paste(out.pref,"_all.csv",sep=""), sep=",")
# calculate genomic control
lam = function(x,p=.5){
x = x[!is.na(x)]
chisq <- qchisq(1-x,1)
round((quantile(chisq,p)/qchisq(p,1)),2)
}
# qq plot
qqpval2 = function(x, main="", col="black"){
x<-sort(-log(x[x>0],10))
n<-length(x)
plot(x=qexp(ppoints(n))/log(10), y=x, xlab="Expected", ylab="Observed", main=main ,col=col ,cex=.8, bg= col, pch = 21)
abline(0,1, lty=2)
}
# qq without identity line
qqpvalOL = function(x, col="blue"){
x<-sort(-log(x[x>0],10))
n<-length(x)
points(x=qexp(ppoints(n))/log(10), y=x, col=col, cex=.8, bg = col, pch = 21)
}
# Load packages
lapply(c("qqman","data.table","tools","RColorBrewer"), library, character.only = TRUE)
# get the right colors
cols <- brewer.pal(8,"Dark2")
# qq plot
png(filename = paste(out.pref,"_all_plots.png",sep=""),width = 11, height = 11, units = "in", res=400, type = "cairo")
# qq plot
png(filename = paste(out.pref,"_all_plots.png",sep=""),width = 11, height = 11, units = "in", res=400)#, type = "cairo")
layout(matrix(c(1,2,3,3),nrow=2,byrow = T))
qqpval2(metal.data[,"P-value"], col=cols[8])
legend('topleft',c(paste0('GC = ',lam(metal.data[,"P-value"]),'/',lam(metal.data[,"P-value"],.9))),col=c(cols[8]),pch=c(21))
qqpval2(metal.data[metal.data$total_maf >= 0.05, "P-value"],col=cols[1])
qqpvalOL(metal.data[metal.data$total_maf < 0.05, "P-value"],col=cols[2])
legend('topleft',c(paste0('MAF >= 5%  ',lam(metal.data[metal.data$total_maf >= 0.05, "P-value"]),'/',lam(metal.data[metal.data$total_maf >= 0.05, "P-value"],.9)),
paste0('MAF < 5%  ',lam(metal.data[metal.data$total_maf < 0.05, "P-value"]),'/',lam(metal.data[metal.data$total_maf < 0.05, "P-value"],.9))
),
col=c(cols[1],cols[2]),pch=c(21,21))
manhattan(metal.data,chr="chr",bp="pos",p="P", main="All variants")
manhattan(metal.data,chr="chr",bp="pos",p="P-value", main="All variants")
dev.off()
# qq plot
png(filename = paste(out.pref,"_all_plots.png",sep=""),width = 11, height = 11, units = "in", res=400)#, type = "cairo")
layout(matrix(c(1,2,3,3),nrow=2,byrow = T))
qqpval2(metal.data[,"P-value"], col=cols[8])
legend('topleft',c(paste0('GC = ',lam(metal.data[,"P-value"]))),col=c(cols[8]),pch=c(21))
qqpval2(metal.data[metal.data$total_maf >= 0.05, "P-value"],col=cols[1])
qqpvalOL(metal.data[metal.data$total_maf < 0.05, "P-value"],col=cols[2])
legend('topleft',c(paste0('MAF >= 5%  ',lam(metal.data[metal.data$total_maf >= 0.05, "P-value"])),
paste0('MAF < 5%  ',lam(metal.data[metal.data$total_maf < 0.05, "P-value"]))),
col=c(cols[1],cols[2]),pch=c(21,21))
manhattan(metal.data,chr="chr",bp="pos",p="P-value", main="All variants")
dev.off()
png(filename = paste(out.pref,"_all_plots.png",sep=""),width = 11, height = 11, units = "in", res=400)#, type = "cairo")
layout(matrix(c(1,2,3,3),nrow=2,byrow = T))
qqpval2(metal.data[,"P-value"], col=cols[8])
legend('topleft',c(paste0('GC = ',lam(metal.data[,"P-value"]))),col=c(cols[8]),pch=c(21))
qqpval2(metal.data[metal.data$total_maf >= 0.05, "P-value"],col=cols[1])
qqpvalOL(metal.data[metal.data$total_maf < 0.05, "P-value"],col=cols[2])
legend('topleft',c(paste0('GC (MAF >= 5%) = ',lam(metal.data[metal.data$total_maf >= 0.05, "P-value"])),
paste0('GC (MAF < 5%) = ',lam(metal.data[metal.data$total_maf < 0.05, "P-value"]))),
col=c(cols[1],cols[2]),pch=c(21,21))
manhattan(metal.data,chr="chr",bp="pos",p="P-value", main="All variants")
dev.off()
